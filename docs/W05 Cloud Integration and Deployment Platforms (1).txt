DevOps: Software Engineering, Deployment, and Operation

W05 Cloud Integration and Deployment Platforms
Stephan Krusche, Ingo Weber

23 May 2025

Schedule

¬© 2025 Stephan Krusche, Ingo Weber

#

Date

Subject

1

25.04.25

Introduction

2

02.05.25

DevOps Culture and Organization

3

09.05.25

Software Engineering Principles in DevOps

4

16.05.25

Virtualization and Containerization

5

23.05.25

Cloud Integration and Deployment Platforms

6

30.05.25

Continuous Delivery and Deployment Strategies

7

06.06.25

Microservices and Scalable Architectures

8

13.06.25

Monitoring and Observability

9

20.06.25

Post-Deployment Management

10

27.06.25

Security and Compliance in DevOps

11

04.07.25

Advanced DevOps Topics and Trends

12

11.07.25

DevOps for AI-based Systems

13

18.07.25

Guest Workshop

14

25.07.25

Course Review + Test Exam

DevOps ‚Äî W05 Cloud Integration and Deployment Platforms

2

Roadmap
‚Ä¢ Context
‚Ä¢
‚Ä¢
‚Ä¢
‚Ä¢

You have a basic understanding of DevOps
You understand the culture behind it
You can apply agile SE, CI and CD
You have a good understanding of Docker, Docker Compose and Kubernetes

‚Ä¢ Learning goals
‚Ä¢
‚Ä¢
‚Ä¢
‚Ä¢

Explain how deployment strategies affect scalability, resilience, and agility
Explain different cloud deployment models
Deploy an application into a cloud infrastructure
Explain how infrastructure as code enables reproducible, scalable, and maintainable
infrastructure

¬© 2025 Stephan Krusche, Ingo Weber

DevOps ‚Äî W05 Cloud Integration and Deployment Platforms

3

Where did cloud computing start?

Source: https://www.ir.com/guides/iaas-paas-saas
¬© 2025 Stephan Krusche, Ingo Weber

DevOps ‚Äî W05 Cloud Integration and Deployment Platforms

4

Outline
‚Ä¢ Deployment models
‚Ä¢ Cloud providers
‚Ä¢ Infrastructure as code

¬© 2025 Stephan Krusche, Ingo Weber

DevOps ‚Äî W05 Cloud Integration and Deployment Platforms

5

Deployment models: from on-premise to SaaS
‚Ä¢ Virtualization is the backbone of cloud
computing

‚Ä¢ Virtualization allows managed service providers
(MSPs) to deliver IT services in 3 models
1. IaaS: MSP delivers VM to customers
2. PaaS: MSP delivers environments to customers
(e.g. database as a service, managed RabbitMQ
service, etc)
3. SaaS: MSP delivers entire application for the
customer

Source: https://www.bmc.com/blogs/saas-vs-paas-vs-iaas-whats-the-difference-and-how-to-choose

¬© 2025 Stephan Krusche, Ingo Weber

DevOps ‚Äî W05 Cloud Integration and Deployment Platforms

6

Cloud service models

Source: https://www.stackscale.com/blog/cloud-service-models

¬© 2025 Stephan Krusche, Ingo Weber

DevOps ‚Äî W05 Cloud Integration and Deployment Platforms

7

¬© 2025 Stephan Krusche, Ingo Weber

DevOps ‚Äî W05 Cloud Integration and Deployment Platforms

Source: https://www.ardoq.com/blog/saas-vs-on-premise

8

On-premise
‚Ä¢ Full responsibility: hardware ‚Üí network ‚Üí operating system ‚Üí applications
‚Ä¢ High control, high maintenance
‚Ä¢ Use cases: banks, secure data centers

Source: https://www.genesesolution.com/blog/on-premises-vs-cloud
¬© 2025 Stephan Krusche, Ingo Weber

DevOps ‚Äî W05 Cloud Integration and Deployment Platforms

9

Infrastructure as a service (IaaS)
‚Ä¢ Provider manages: virtualization, hardware, networking
‚Ä¢ You manage: operating system, runtimes, data, applications
‚Ä¢ Example: Amazon Web Services (AWS), Microsoft Azure, Google Cloud, IBM
Cloud, ‚Ä¶

‚Ä¢ Advantages
‚Ä¢ Highly exible and highly scalable
‚Ä¢ Accessible by multiple users
‚Ä¢ Cost-effective

fl

¬© 2025 Stephan Krusche, Ingo Weber

DevOps ‚Äî W05 Cloud Integration and Deployment Platforms

10

Platform as a service (PaaS)
‚Ä¢
‚Ä¢
‚Ä¢
‚Ä¢

Provider also manages: operating systems, middleware, runtime
You manage: application and data
Examples: Heroku, Google App Engine, Azure App Service
Advantages

‚Ä¢ Accessible by multiple users
‚Ä¢ Scalable: customers can choose from various tiers of computing resources to suit the
size of their business

‚Ä¢ Built on virtualization technology
‚Ä¢ Easy to run without extensive system administration knowledge

‚Ä¢ Trade-offs: less control, more speed

¬© 2025 Stephan Krusche, Ingo Weber

DevOps ‚Äî W05 Cloud Integration and Deployment Platforms

11

Software as a service (SaaS)
‚Ä¢
‚Ä¢
‚Ä¢
‚Ä¢

Everything managed by the provider
You use the software via browser/API
Examples: GitHub, Google Docs, Salesforce, Adobe Creative Cloud
Advantages

‚Ä¢ Zero deployment: available over the Internet, and usable any time as long as there is
an internet connection

‚Ä¢ Scalable, with different tiers for small, medium and enterprise-level businesses
‚Ä¢ Ideal for small businesses or startups who cannot develop their own software
applications

‚Ä¢ Inclusive, offering security, compliance and maintenance as part of the cost

‚Ä¢ Pitfall: minimal customization, vendor lock-in, high costs
¬© 2025 Stephan Krusche, Ingo Weber

DevOps ‚Äî W05 Cloud Integration and Deployment Platforms

12

Comparison
Model

You manage

Provider manages

Example

On-premise

All layers

Nothing

Legacy systems

IaaS

OS, middleware,
runtime, app

Virtualization,
storage, networking

AWS EC2

PaaS

App, data

OS, runtime, infra

Heroku, GAE

SaaS

Just usage

Everything

Gmail, Dropbox

¬© 2025 Stephan Krusche, Ingo Weber

DevOps ‚Äî W05 Cloud Integration and Deployment Platforms

13

Why deployment models evolve
‚Ä¢ Drivers: cost, scalability, maintenance, agility
‚Ä¢ Question: ‚Äúshould we own the infrastructure or rent it?‚Äù
‚Ä¢ Analogy: owning a car vs. using ride-sharing

¬© 2025 Stephan Krusche, Ingo Weber

DevOps ‚Äî W05 Cloud Integration and Deployment Platforms

14

AWS academy guide

¬© 2025 Stephan Krusche, Ingo Weber

DevOps ‚Äî W05 Cloud Integration and Deployment Platforms

15

AWS academy guide

¬© 2025 Stephan Krusche, Ingo Weber

DevOps ‚Äî W05 Cloud Integration and Deployment Platforms

16

AWS academy guide

Choose this here!

¬© 2025 Stephan Krusche, Ingo Weber

DevOps ‚Äî W05 Cloud Integration and Deployment Platforms

17

AWS academy guide

Should be your TUM Mail

Set correct time zone

¬© 2025 Stephan Krusche, Ingo Weber

DevOps ‚Äî W05 Cloud Integration and Deployment Platforms

18

AWS academy guide

Go the the modules

¬© 2025 Stephan Krusche, Ingo Weber

DevOps ‚Äî W05 Cloud Integration and Deployment Platforms

19

AWS academy guide

Access the Learner Lab

¬© 2025 Stephan Krusche, Ingo Weber

DevOps ‚Äî W05 Cloud Integration and Deployment Platforms

20

AWS academy guide

Need to accept Terms

¬© 2025 Stephan Krusche, Ingo Weber

DevOps ‚Äî W05 Cloud Integration and Deployment Platforms

21

AWS academy guide

See AWS Status

¬© 2025 Stephan Krusche, Ingo Weber

Start the lap

DevOps ‚Äî W05 Cloud Integration and Deployment Platforms

22

AWS academy guide
Remaining session time

See AWS Status

¬© 2025 Stephan Krusche, Ingo Weber

Remaining money

DevOps ‚Äî W05 Cloud Integration and Deployment Platforms

23

AWS academy guide
Click here to get SSH Key

Download SSH private Key

¬© 2025 Stephan Krusche, Ingo Weber

DevOps ‚Äî W05 Cloud Integration and Deployment Platforms

24

AWS academy guide

Click here to open
AWS Console

¬© 2025 Stephan Krusche, Ingo Weber

DevOps ‚Äî W05 Cloud Integration and Deployment Platforms

25

AWS academy guide

AWS Console

¬© 2025 Stephan Krusche, Ingo Weber

DevOps ‚Äî W05 Cloud Integration and Deployment Platforms

26

Outline
‚Ä¢ Deployment models
‚Ä¢ Cloud providers
‚Ä¢ Infrastructure as code

¬© 2025 Stephan Krusche, Ingo Weber

DevOps ‚Äî W05 Cloud Integration and Deployment Platforms

27

Overview

¬© 2025 Stephan Krusche, Ingo Weber

DevOps ‚Äî W05 Cloud Integration and Deployment Platforms

28

Source: https://www.emma.ms/blog/top-10-cloud-computing-service-providers
¬© 2025 Stephan Krusche, Ingo Weber

DevOps ‚Äî W05 Cloud Integration and Deployment Platforms

29

Hybrid and multi-cloud
‚Ä¢ Combine on-premise with cloud (e.g., for compliance)
‚Ä¢ Multi-cloud for redundancy or negotiation leverage
‚Ä¢ Example: Net ix uses AWS + backup on GCP

fl

¬© 2025 Stephan Krusche, Ingo Weber

DevOps ‚Äî W05 Cloud Integration and Deployment Platforms

30

Serverless: event-driven and fully abstracted infrastructure
‚Ä¢ De nition: you deploy code, the platform manages runtime and infrastructure
(pay per execution)

‚Ä¢ Also called function as a service (FaaS)
‚Ä¢ Examples: AWS Lambda, Azure Functions, Google Cloud Functions
‚Ä¢ Characteristics
‚Ä¢
‚Ä¢
‚Ä¢
‚Ä¢

Zero infrastructure management
Autoscaling to zero
Stateless functions
Use case: image processing on S3 upload, cron jobs, lightweight APIs

fi

¬© 2025 Stephan Krusche, Ingo Weber

DevOps ‚Äî W05 Cloud Integration and Deployment Platforms

31

Serverless vs. PaaS

Aspect

PaaS (e.g., GAE)

Serverless (e.g., Lambda)

Scaling

Instance-based

Per-function call

Billing

Uptime

Per execution time

Startup latency

Low

Potential cold start

Deployment unit

App

Function

¬© 2025 Stephan Krusche, Ingo Weber

DevOps ‚Äî W05 Cloud Integration and Deployment Platforms

32

LLM inference as a service
‚Ä¢
‚Ä¢
‚Ä¢
‚Ä¢

Conceptually between SaaS and PaaS
Operationally triggered via FaaS or other compute models
Example: GPT-4.1 in Microsoft Azure is consumed as a managed API service
You don‚Äôt host or scale the model yourself‚Äîyou send a prompt, and Azure
handles the infrastructure, scaling, model optimization, and response

Aspect

Description

Delivery Model

SaaS like (abstracted), exposed via REST API

Provider

Microsoft Azure OpenAI Service

Infrastructure

Fully managed, runs on Azure superclusters (not visible to the user)

Scaling

Handled transparently by Azure (concurrent requests, rate-limited per quota)

Integration Options

Any compute platform (FaaS, PaaS, VM, client-side)

Pricing

Per-token billing

¬© 2025 Stephan Krusche, Ingo Weber

DevOps ‚Äî W05 Cloud Integration and Deployment Platforms

33

Privacy and security in cloud deployment models
‚Ä¢ üß© Common assumption: ‚Äúif we run everything ourselves (on-premise), it‚Äôs
private and secure‚Äù

‚Ä¢ Control over hardware and data location
‚Ä¢ No external access to infrastructure
‚Ä¢ Seen as compliance-friendly, especially in regulated sectors

‚Ä¢ üß® The misconception: ‚Äúowning the servers means better security‚Äù
‚Ä¢ Reality: security depends on expertise, not ownership
‚Ä¢ On-premise breaches often result from
‚Ä¢ Unpatched systems
‚Ä¢ Weak internal access control
‚Ä¢ Poor logging and monitoring

‚Ä¢ ‚ÄúYou‚Äôre only as secure as your least informed admin‚Äù
¬© 2025 Stephan Krusche, Ingo Weber

DevOps ‚Äî W05 Cloud Integration and Deployment Platforms

34

üèó Cloud reality
‚Ä¢ Hyperscalers (AWS, Azure, GCP) have
‚Ä¢
‚Ä¢
‚Ä¢
‚Ä¢

Dedicated security teams (often 24/7, with red/blue teams)
Automated patching and hardened systems
Proven compliance frameworks (ISO 27001, SOC2, etc.)
Shared responsibility model: cloud provider secures infrastructure, you secure your
usage

‚Ä¢ üîÅ Takeaway message
‚Ä¢ On-premise gives you control‚Äîbut not necessarily competence
‚Ä¢ Cloud gives you abstraction‚Äîbut demands accountability

¬© 2025 Stephan Krusche, Ingo Weber

DevOps ‚Äî W05 Cloud Integration and Deployment Platforms

35

Pricing and cost considerations
‚Ä¢
‚Ä¢
‚Ä¢
‚Ä¢

Pricing models: pay-as-you-go, reserved instances, spot pricing
Hidden costs: bandwidth, cold storage retrieval, API calls
Cloud calculators: AWS pricing calculator, Azure cost estimator
FinOps: cost optimization is a skill

¬© 2025 Stephan Krusche, Ingo Weber

DevOps ‚Äî W05 Cloud Integration and Deployment Platforms

36

Lock-in and portability
‚Ä¢ APIs are proprietary: migrating between clouds is non-trivial
‚Ä¢ Examples
‚Ä¢ S3 APIs ‚â† GCS APIs
‚Ä¢ IAM (identity and access management) roles differ vastly

‚Ä¢ Mitigations
‚Ä¢ Use open standards (e.g., open container initiative, Kubernetes)
‚Ä¢ Use infrastructure as code (IaC) and abstraction tools

¬© 2025 Stephan Krusche, Ingo Weber

DevOps ‚Äî W05 Cloud Integration and Deployment Platforms

37

Compliance and data residency
‚Ä¢
‚Ä¢
‚Ä¢
‚Ä¢

Global cloud regions and availability zones
Sensitive data and legal boundaries (e.g., GDPR, Schrems II)
Question: can the government potentially access data?
Azure Germany, Sovereign Cloud, AWS GovCloud

¬© 2025 Stephan Krusche, Ingo Weber

DevOps ‚Äî W05 Cloud Integration and Deployment Platforms

38

Exercise W05E01
Deploy TUM Mensa App to AWS EC2 using docker compose

¬© 2025 Stephan Krusche, Ingo Weber

DevOps ‚Äî W05 Cloud Integration and Deployment Platforms

39

W05E01 ‚Äî 01: AWS academy

Use Search to nd EC2

fi

¬© 2025 Stephan Krusche, Ingo Weber

DevOps ‚Äî W05 Cloud Integration and Deployment Platforms

40

W05E01 ‚Äî 02: AWS academy
Open EC2 Interface

¬© 2025 Stephan Krusche, Ingo Weber

DevOps ‚Äî W05 Cloud Integration and Deployment Platforms

41

W05E01 ‚Äî 03: AWS academy
Overview of EC2 resources

¬© 2025 Stephan Krusche, Ingo Weber

DevOps ‚Äî W05 Cloud Integration and Deployment Platforms

42

W05E01 ‚Äî 04: AWS academy

Create a new EC2 instance

¬© 2025 Stephan Krusche, Ingo Weber

DevOps ‚Äî W05 Cloud Integration and Deployment Platforms

43

W05E01 ‚Äî 05: AWS academy

Name your EC2 Instance

Select Ubuntu as OS Image

¬© 2025 Stephan Krusche, Ingo Weber

DevOps ‚Äî W05 Cloud Integration and Deployment Platforms

44

W05E01 ‚Äî 06: AWS academy

Choose vockey as key pair

Make sure HTTP and HTTPS
are enabled

¬© 2025 Stephan Krusche, Ingo Weber

DevOps ‚Äî W05 Cloud Integration and Deployment Platforms

45

W05E01 ‚Äî 07: AWS academy

Connect to EC2 Instance
One running instance

Remember public IP

¬© 2025 Stephan Krusche, Ingo Weber

DevOps ‚Äî W05 Cloud Integration and Deployment Platforms

46

W05E01 ‚Äî 08: AWS academy

SSH command to connect
to the EC2 instance

¬© 2025 Stephan Krusche, Ingo Weber

DevOps ‚Äî W05 Cloud Integration and Deployment Platforms

47

W05E01 ‚Äî 09: AWS academy (reminder)

Download SSH private key

¬© 2025 Stephan Krusche, Ingo Weber

DevOps ‚Äî W05 Cloud Integration and Deployment Platforms

48

W05E01 ‚Äî 10: AWS exercise
‚Ä¢ Switch to your local terminal
‚Ä¢ You can copy the commands using
https://gist.github.com/robertjndw/d69e282a81e86a965c2dfcf67593a907

Adapt permissions of your
local private SSH key

chmod 400 Downloads/labsuser.pem
¬© 2025 Stephan Krusche, Ingo Weber

DevOps ‚Äî W05 Cloud Integration and Deployment Platforms

49

W05E01 ‚Äî 11: AWS exercise

Adapt path to your downloaded
private key and instance url

Adapt based on the EC2 url copied in a previous step
ssh -i Downloads/labsuser.pem ubuntu@ec2-3-86-214-246.compute-1.amazonaws.com
¬© 2025 Stephan Krusche, Ingo Weber

DevOps ‚Äî W05 Cloud Integration and Deployment Platforms

50

W05E01 ‚Äî 12: AWS exercise

Accept ngerprint

fi

¬© 2025 Stephan Krusche, Ingo Weber

DevOps ‚Äî W05 Cloud Integration and Deployment Platforms

51

W05E01 ‚Äî 13: AWS exercise

Terminal as ubuntu user on the EC2 VM

¬© 2025 Stephan Krusche, Ingo Weber

DevOps ‚Äî W05 Cloud Integration and Deployment Platforms

52

W05E01 ‚Äî 14: AWS exercise
Commands to add
docker repo for Ubuntu

# Add Docker's official GPG key:
sudo apt-get update
sudo apt-get install ca-certificates curl
sudo install -m 0755 -d /etc/apt/keyrings
sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
sudo chmod a+r /etc/apt/keyrings/docker.asc
# Add the repository to Apt sources:
echo \
"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
$(. /etc/os-release && echo "${UBUNTU_CODENAME:-$VERSION_CODENAME}") stable" | \
sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
sudo apt-get update

¬© 2025 Stephan Krusche, Ingo Weber

DevOps ‚Äî W05 Cloud Integration and Deployment Platforms

53

W05E01 ‚Äî 15: AWS exercise

Commands to install
Docker on Ubuntu

sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

¬© 2025 Stephan Krusche, Ingo Weber

DevOps ‚Äî W05 Cloud Integration and Deployment Platforms

54

W05E01 ‚Äî 16: AWS exercise

Allow user to run
Docker commands

sudo usermod -a -G docker ubuntu
¬© 2025 Stephan Krusche, Ingo Weber

DevOps ‚Äî W05 Cloud Integration and Deployment Platforms

55

W05E01 ‚Äî 17: AWS exercise

Allow user to run
Docker commands

Log out and
log in again!

¬© 2025 Stephan Krusche, Ingo Weber

DevOps ‚Äî W05 Cloud Integration and Deployment Platforms

56

W05E01 ‚Äî 18: AWS exercise

Verify that docker and docker
compose are working

docker --version
docker compose version
¬© 2025 Stephan Krusche, Ingo Weber

DevOps ‚Äî W05 Cloud Integration and Deployment Platforms

57

W05E01 ‚Äî 19: AWS exercise
‚Ä¢ Now let‚Äôs set up the deployment pipeline using Github environments
‚Ä¢ Open https://github.com/AET-DevOps25/w05-template
‚Ä¢ Fork and clone the repository

¬© 2025 Stephan Krusche, Ingo Weber

DevOps ‚Äî W05 Cloud Integration and Deployment Platforms

58

W05E01 ‚Äî 20: AWS exercise
Go into the settings of
your repository

¬© 2025 Stephan Krusche, Ingo Weber

DevOps ‚Äî W05 Cloud Integration and Deployment Platforms

59

W05E01 ‚Äî 21: AWS exercise

2. Create new environment

1. Go to the environments

¬© 2025 Stephan Krusche, Ingo Weber

DevOps ‚Äî W05 Cloud Integration and Deployment Platforms

60

W05E01 ‚Äî 22: AWS exercise

Name it ‚ÄúAWS‚Äù

¬© 2025 Stephan Krusche, Ingo Weber

DevOps ‚Äî W05 Cloud Integration and Deployment Platforms

61

W05E01 ‚Äî 23: AWS exercise

No variables yet

¬© 2025 Stephan Krusche, Ingo Weber

DevOps ‚Äî W05 Cloud Integration and Deployment Platforms

62

W05E01 ‚Äî 24: AWS exercise

Create ‚ÄòAWS_EC2_PRIVATE_KEY‚Äô with
the downloaded private SSH key
Create ‚ÄòAWS_EC2_USER‚Äô
with the value ‚Äòubuntu‚Äô
Create ‚ÄòEC2_PUBLIC_IP‚Äô with
the public IP of your instance

¬© 2025 Stephan Krusche, Ingo Weber

DevOps ‚Äî W05 Cloud Integration and Deployment Platforms

63

W05E01 ‚Äî 25: AWS exercise
Go to the GitHub actions of your repo

Enable the work ows manually

fl

¬© 2025 Stephan Krusche, Ingo Weber

DevOps ‚Äî W05 Cloud Integration and Deployment Platforms

64

W05E01 ‚Äî 26: AWS exercise

2. Run the work ow from
your main branch
1. Go to the
Deploy Docker images work ow

DevOps ‚Äî W05 Cloud Integration and Deployment Platforms
fl

fl

¬© 2025 Stephan Krusche, Ingo Weber

65

W05E01 ‚Äî 27: AWS exercise

You will nd your
instance‚Äôs URL here

fi

¬© 2025 Stephan Krusche, Ingo Weber

DevOps ‚Äî W05 Cloud Integration and Deployment Platforms

66

W05E01 ‚Äî 28: AWS exercise

Don‚Äôt forget to stop your
instance to save costs

¬© 2025 Stephan Krusche, Ingo Weber

DevOps ‚Äî W05 Cloud Integration and Deployment Platforms

67

Break

10 min
The workshop will continue at 13:20

¬© 2025 Stephan Krusche, Ingo Weber

DevOps ‚Äî W05 Cloud Integration and Deployment Platforms

68

Outline
‚Ä¢ Deployment models
‚Ä¢ Cloud providers
‚Ä¢ Infrastructure as code

¬© 2025 Stephan Krusche, Ingo Weber

DevOps ‚Äî W05 Cloud Integration and Deployment Platforms

69

Infrastructure as code: automating cloud deployment
‚Ä¢ What you did manually, you can also de ne as code

Source: https://spectralops.io/blog/how-does-infrastructure-as-code-on-aws-work
DevOps ‚Äî W05 Cloud Integration and Deployment Platforms
fi

¬© 2025 Stephan Krusche, Ingo Weber

70

Recap: what you did
‚Ä¢
‚Ä¢
‚Ä¢
‚Ä¢
‚Ä¢

Launch EC2 instance manually via AWS Console
SSH into instance
Install required tools (e.g. docker + docker compose)
Set up users and access rights
Deploy a client server application using Github actions

¬© 2025 Stephan Krusche, Ingo Weber

DevOps ‚Äî W05 Cloud Integration and Deployment Platforms

71

The problem with manual setup
‚Ä¢
‚Ä¢
‚Ä¢
‚Ä¢

Error-prone and inconsistent
Time-consuming and hard to scale
No version control or audit possibilities
Dif cult handover between teams

‚Ä¢ Remember Jez Humble: ‚Äúif it hurts, do it more frequently, and bring the pain
forward‚Äù ‚Üí automation

fi

¬© 2025 Stephan Krusche, Ingo Weber

DevOps ‚Äî W05 Cloud Integration and Deployment Platforms

72

Infrastructure as code (IaC)
‚Ä¢ De nition: declarative or procedural de nitions of infrastructure in code
‚Ä¢ Treat infrastructure like software
‚Ä¢ Versioned in git
‚Ä¢ Reviewed via pull requests
‚Ä¢ Tested and validated

‚Ä¢ Analogy: Docker le for VM setups

fi

DevOps ‚Äî W05 Cloud Integration and Deployment Platforms
fi

fi

¬© 2025 Stephan Krusche, Ingo Weber

73

Terraform
‚Ä¢ Infrastructure as code (IaC) tool developed by HashiCorp
‚Ä¢ Allows you to de ne and manage cloud and on-premises infrastructure using
con guration les

‚Ä¢ Example: provision EC2 instances on AWS (no manual clicks)
‚Ä¢ Tutorial: https://spacelift.io/blog/terraform-ec2-instance

‚Ä¢ Build, change, and version infrastructure safely and ef ciently by using a
consistent work ow to provision and manage all your resources

‚Ä¢ Uses a declarative con guration language, HashiCorp con guration
language (HCL), to describe the desired state of your infrastructure

74
fi

fi

fi

DevOps ‚Äî W05 Cloud Integration and Deployment Platforms
fi

fl

fi

fi

¬© 2025 Stephan Krusche, Ingo Weber

Terraform
‚Ä¢
‚Ä¢
‚Ä¢
‚Ä¢

Use case: de ne and deploy EC2, security groups, VPC
Declarative language (HCL)
Provider ecosystem (AWS, Azure, GCP, GitHub, Kubernetes, etc.)
Example
resource "aws_instance" "app" {
ami
= "ami-123456"
instance_type = "t2.micro"
}

fi

¬© 2025 Stephan Krusche, Ingo Weber

DevOps ‚Äî W05 Cloud Integration and Deployment Platforms

75

Ansible
‚Ä¢ Open source automation platform used for managing, deploying, and
con guring IT infrastructure

‚Ä¢ Automates tasks like software deployment, con guration management, and
application deployment

‚Ä¢ Example: Allows you to install all requirements on the EC2 instance and setup
everything necessary for the CI/CD pipeline

‚Ä¢ Relies on modules that perform speci c actions, such as installing software or
managing services, and uses YAML for de ning con guration

fi

fi

fi

DevOps ‚Äî W05 Cloud Integration and Deployment Platforms
fi

fi

¬© 2025 Stephan Krusche, Ingo Weber

76

Ansible
‚Ä¢
‚Ä¢
‚Ä¢
‚Ä¢
‚Ä¢

Use case: install Docker, con gure services, copy les
Agentless, uses SSH
Idempotent: safe to rerun
Possibility to dry run
YAML playbooks
- name: Install Docker
apt:
name: docker.io
state: present

fi

DevOps ‚Äî W05 Cloud Integration and Deployment Platforms
fi

¬© 2025 Stephan Krusche, Ingo Weber

77

Terraform + Ansible = full automation
‚Ä¢ Terraform: create the machine
‚Ä¢ Ansible: con gure the machine

Step

Manual

IaC (Terraform + Ansible)

Launch EC2

Click in console

Terraform script

Install Docker

SSH + apt install

Ansible playbook

Run app

Docker Compose

Ansible + template + systemd task

Rerun after crash

Repeat manually

terraform apply + ansible-playbook

fi

¬© 2025 Stephan Krusche, Ingo Weber

DevOps ‚Äî W05 Cloud Integration and Deployment Platforms

78

GitOps and IaC best practices
‚Ä¢
‚Ä¢
‚Ä¢
‚Ä¢

Version control all infrastructure
Use CI/CD to deploy infrastructure changes
Avoid drift: reconcile state regularly
Secrets: never hard-code, instead use a vault (e.g. HashiCorp Vault) or e.g.
AWS secrets manager

‚Ä¢ Recommendation for Github: store secrets in Settings ‚Üí Security ‚Üí
Secrets and variables ‚Üí Actions

‚Ä¢ Then the CI/CD pipeline has access to them

¬© 2025 Stephan Krusche, Ingo Weber

DevOps ‚Äî W05 Cloud Integration and Deployment Platforms

79

From VMs to Kubernetes: the next step
‚Ä¢ Motivation: EC2 + Docker Compose was step one, now let‚Äôs go cloud-native
‚Ä¢ Challenge: Kubernetes YAMLs are verbose and hard to manage
‚Ä¢ Solution: Helm ‚Äì the package manager for Kubernetes

¬© 2025 Stephan Krusche, Ingo Weber

DevOps ‚Äî W05 Cloud Integration and Deployment Platforms

80

Helm
‚Ä¢
‚Ä¢
‚Ä¢
‚Ä¢

De ne, version, and reuse Kubernetes con gurations
Supports templating, values injection, environment separation
Analogy: Terraform for K8s apps or Docker Compose for K8s
Helm charts are packages that contain all the Kubernetes resources needed to
deploy an application

‚Ä¢ Including YAML les for deployments, services, secrets, and con g maps
‚Ä¢ Simplify application deployment and management in Kubernetes by providing a
structured way to package, version, and share Kubernetes resources

81
fi

DevOps ‚Äî W05 Cloud Integration and Deployment Platforms
fi

fi

fi

¬© 2025 Stephan Krusche, Ingo Weber

Helm chart example
# values.yaml
replicaCount: 2
image:
repository: my-app
tag: latest

# templates/deployment.yaml
spec:
replicas: {{ .Values.replicaCount }}
containers:
- name: app
image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"

¬© 2025 Stephan Krusche, Ingo Weber

DevOps ‚Äî W05 Cloud Integration and Deployment Platforms

82

IaC tool comparison

Logo

fi

¬© 2025 Stephan Krusche, Ingo Weber

Tool

Purpose

Scope

Terraform Provision infrastructure

Cloud resources
(e.g. VM, K8s cluster)

Ansible

Con gure machines/services

SSH targets
(mostly VMs)

Helm

Deploy K8s applications

Kubernetes clusters

DevOps ‚Äî W05 Cloud Integration and Deployment Platforms

83

Exercise W05E02
Deploy TUM Mensa App to TUM Kubernetes cluster using helm

¬© 2025 Stephan Krusche, Ingo Weber

DevOps ‚Äî W05 Cloud Integration and Deployment Platforms

84

W05E02 ‚Äî 01: Exercise Kubernetes deployment
1. Open https://rancher.ase.cit.tum.de
2. Log in with your TUM ID
3. Access the Student Cluster

¬© 2025 Stephan Krusche, Ingo Weber

DevOps ‚Äî W05 Cloud Integration and Deployment Platforms

85

W05E02 ‚Äî 02: Exercise Kubernetes deployment

You should see this cluster

¬© 2025 Stephan Krusche, Ingo Weber

DevOps ‚Äî W05 Cloud Integration and Deployment Platforms

86

W05E02 ‚Äî 03: Exercise Kubernetes deployment
Download the kubecon g student.yaml

fi

¬© 2025 Stephan Krusche, Ingo Weber

DevOps ‚Äî W05 Cloud Integration and Deployment Platforms

87

W05E02 ‚Äî 04: Exercise Kubernetes deployment
1. Download the kubeconfig student.yaml

If you already have something in there create a backup of the le rst!

2. Put the le student.yaml into ~/.kube/config

3. Verify with kubectl config current-context

This should return student

Download the kubecon g student.yaml

fi

fi

fi

fi

¬© 2025 Stephan Krusche, Ingo Weber

DevOps ‚Äî W05 Cloud Integration and Deployment Platforms

88

W05E02 ‚Äî 05: Exercise Kubernetes deployment
1. Create the namespace in devops25-k8s-demo

Enter the Projects/Namespaces dashboard

Click on Create Namespace

¬© 2025 Stephan Krusche, Ingo Weber

DevOps ‚Äî W05 Cloud Integration and Deployment Platforms

89

W05E02 ‚Äî 06: Exercise Kubernetes deployment
1. Create the namespace in devops25-k8s-demo
2. Name your namespace: <tum-id>-devops25

e.g. ge42uff-devops25

Enter the Projects/Namespaces dashboard

Click on Create Namespace

¬© 2025 Stephan Krusche, Ingo Weber

DevOps ‚Äî W05 Cloud Integration and Deployment Platforms

90

W05E02 ‚Äî 07: Exercise Kubernetes deployment
1. Use the same forked repo of https://github.com/AET-DevOps25/w05-template
2. Navigate to the local copy
3. Navigate to helm/canteen-app

¬© 2025 Stephan Krusche, Ingo Weber

DevOps ‚Äî W05 Cloud Integration and Deployment Platforms

91

W05E02 ‚Äî 09: Exercise Kubernetes deployment
1. Enter the TUM id in values.yml:4
2. Run the following command in the directory helm/canteen-app
helm install --namespace <tum-id>-devops25 canteen .
Enter previously created
namespace here

3. The deployment command should successfully complete

¬© 2025 Stephan Krusche, Ingo Weber

DevOps ‚Äî W05 Cloud Integration and Deployment Platforms

92

W05E02 ‚Äî 08: Exercise Kubernetes deployment
1. Enter the TUM id in values.yml:4

Enter previously created
namespace here

2. Run the following command in the directory
helm install --namespace <tum-id>-devops25 canteen .

3. The command should successfully complete

¬© 2025 Stephan Krusche, Ingo Weber

DevOps ‚Äî W05 Cloud Integration and Deployment Platforms

93

W05E02 ‚Äî 10: Exercise Kubernetes deployment

Click into your namespace

¬© 2025 Stephan Krusche, Ingo Weber

DevOps ‚Äî W05 Cloud Integration and Deployment Platforms

94

W05E02 ‚Äî 11: Exercise Kubernetes deployment

Go to Ingresses to see the instance URL

¬© 2025 Stephan Krusche, Ingo Weber

DevOps ‚Äî W05 Cloud Integration and Deployment Platforms

95

W05E02 ‚Äî 12: Exercise Kubernetes deployment

Go to client to open app

¬© 2025 Stephan Krusche, Ingo Weber

DevOps ‚Äî W05 Cloud Integration and Deployment Platforms

96

W05E02 ‚Äî 13: Exercise Kubernetes deployment

¬© 2025 Stephan Krusche, Ingo Weber

DevOps ‚Äî W05 Cloud Integration and Deployment Platforms

97

Next steps
‚Ä¢ Project work
‚Ä¢ Set up an EC2 instance on AWS academy and deploy your team project
‚Ä¢ Set up Terraform and Ansible scripts in your team repository to automate these steps
‚Ä¢ Set up Kubernetes con gurations (yaml) and Helm charts in your repository to deploy
your team project into the AET cluster

‚Ä¢ Set up Github actions for a docker deployment to AWS and a Kubernetes (helm)
deployment to the AET cluster

‚Ä¢ Read the following tutorials
‚Ä¢ Terraform: https://developer.hashicorp.com/terraform/tutorials/aws-get-started/infrastructure-as-code
‚Ä¢ Ansible + Terraform: https://sonalirajput.hashnode.dev/automating-docker-and-terraform-deployment-with-ansible
‚Ä¢ Helm charts: https://www.baeldung.com/ops/kubernetes-helm

‚Üí Deadline: Friday, May 30, 11:00
DevOps ‚Äî W05 Cloud Integration and Deployment Platforms
fi

¬© 2025 Stephan Krusche, Ingo Weber

98

Summary
‚Ä¢ Deployment models: On-premise ‚Üí IaaS ‚Üí PaaS ‚Üí SaaS ‚Üí FaaS
‚Ä¢ Tradeoff between more abstraction and less control
‚Ä¢ Serverless: great for scaling and simplicity, but limited by cold starts and observability

‚Ä¢ Cloud providers: AWS, Azure, GCP dominate; differ in tools, pricing, and ecosystem t
‚Ä¢ Cloud trade-offs: abstraction increases speed but reduces transparency‚Äîsecurity,
privacy, and cost optimization require active management (‚Üí misconceptions)

‚Ä¢ IaC motivation: cumbersome manual setups highlight need for automation
‚Ä¢ Infrastructure as code
‚Ä¢ Terraform provisions cloud infrastructure
‚Ä¢ Ansible con gures servers
‚Ä¢ Helm manages Kubernetes deployments

‚Ä¢ Key insight: reliable DevOps needs infrastructure de ned and deployed as code
99
fi

DevOps ‚Äî W05 Cloud Integration and Deployment Platforms
fi

fi

¬© 2025 Stephan Krusche, Ingo Weber

References
‚Ä¢
‚Ä¢
‚Ä¢
‚Ä¢
‚Ä¢
‚Ä¢
‚Ä¢
‚Ä¢
‚Ä¢
‚Ä¢
‚Ä¢
‚Ä¢
‚Ä¢
‚Ä¢

https://www.genesesolution.com/blog/on-premises-vs-cloud
https://www.ardoq.com/blog/saas-vs-on-premise
https://www.bmc.com/blogs/saas-vs-paas-vs-iaas-whats-the-difference-and-how-to-choose
https://www.stackscale.com/blog/cloud-service-models
https://www.ir.com/guides/iaas-paas-saas
https://www.redhat.com/en/topics/cloud-computing/iaas-vs-paas-vs-saas
https://www.usu.com/en-us/it-service-management/hybrid-cloud-vs-multi-cloud-whats-the-difference
https://www.emma.ms/blog/top-10-cloud-computing-service-providers
https://spectralops.io/blog/how-does-infrastructure-as-code-on-aws-work
https://spacelift.io/blog/terraform-ec2-instance
https://developer.hashicorp.com/terraform/tutorials/aws-get-started/infrastructure-as-code
https://docs.ansible.com
https://sonalirajput.hashnode.dev/automating-docker-and-terraform-deployment-with-ansible
https://www.baeldung.com/ops/kubernetes-helm

¬© 2025 Stephan Krusche, Ingo Weber

DevOps ‚Äî W05 Cloud Integration and Deployment Platforms

100

