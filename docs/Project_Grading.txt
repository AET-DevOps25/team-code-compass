✅ Project Grading Checklist (100 Points Total)
Category	Points
Functional Application	20
GenAI Integration	10
Containerization & Local Setup	10
CI/CD & Deployment	20
Monitoring & Observability	10
Testing & Engineering Process	20
Documentation & Weekly Reporting	10
Final Presentation	Pass/Fail
Bonus	Up to +5
⚠️ Important
❗️ If team contributions are not reasonably distributed and documented well in the Artemis Communication Channel and Confluence Weekly Reports, then communication is not transparent, or you cannot confidently explain your work during the presentation, your project will be graded as failed. ❗️
1. 🧩 Functional Application (20 Points)
Criteria	Points
End-to-end functionality between all components (client, server, database)	6
Smooth and usable user interface	4
REST API is clearly defined and matches functional needs	4
Server Side has at least 3 microservices	4
Application topic is appropriately chosen and fits project objectives	2
2. 🤖 GenAI Integration (10 Points)
Criteria	Points
GenAI module is well-embedded and fulfills a real user-facing purpose	4
Connects to cloud/local LLM	4
Modularity of the GenAI logic as a microservice	2
3. 🐳 Containerization & Local Setup (10 Points)
Criteria	Points
Each component is containerized and runnable in isolation	6
docker-compose.yml enables local development and testing with minimal effort and provides sane defaults (no complex env setup required)	4
4. 🔁 CI/CD & Deployment (20 Points)
Criteria	Points
CI pipeline with build, test, and Docker image generation via GitHub Actions	8
CD pipeline set up to automatically deploy to Kubernetes on main merge	6
Deployment works on our infrastructure (Rancher) and Cloud (AWS)	6
5. 📊 Monitoring & Observability (10 Points)
Criteria	Points
Prometheus integrated and collecting meaningful metrics	4
Grafana dashboards for system behavior visualization	4
At least one alert rule set up	2
6. 🧪 Testing & Structured Engineering Process (20 Points)
Criteria	Points
Test cases implemented for server/client and GenAI logic	6
Evidence of software engineering process: documented requirements, architecture models, such as top-level architecture, use case diagramm and analysis object model.	10
Tests run automatically in CI and cover key functionality	4
7. 📚 Documentation & Weekly Reporting (10 Points)
Criteria	Points
README.md and some parts in Confluence includes setup instructions, architecture overview, usage guide, and a clear mapping of student responsibilities	2
Documentation of CI/CD setup, and GenAI usage included	2
Deployment and local setup instructions are clear, reproducible, and platform-specific (≤3 commands for local setup, with sane defaults)	2
Subsystems have documented interfaces (API-driven deployment, e.g. Swagger/OpenAPI)	2
Monitoring instructions included in the documentation and exported as files	2
8. 🎤 Final Presentation (Pass/Fail)
Criteria	Points
All students present their own subsystem	Pass/Fail
Live demo of application and DevOps setup	Pass/Fail
Team reflects on what worked well, what didn’t, and answers follow-up technical questions	Pass/Fail
🏅 Bonus Points (up to +5)
Criteria	Points
Advanced Kubernetes use (e.g., self-healing, custom operators, auto-scaling)	+1
Full RAG pipeline implementation (with vector DB like Weaviate)	+1
Real-world-grade observability (e.g., log aggregation, tracing)	+1
Beautiful, original UI or impactful project topic	+1
Advanced monitoring setup with extensive and meaningful metrics (e.g., custom Prometheus exporters or Grafana dashboards with annotated insights)	+1
