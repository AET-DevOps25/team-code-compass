---
config:
  layout: dagre
  theme: redux
---
flowchart LR
 subgraph subGraph0["User Interface"]
        ClientWeb["Client-Web (React)"]
  end
 subgraph subGraph1["API Gateway"]
        APIGateway["api-gateway (Spring Cloud Gateway)"]
  end
 subgraph subGraph2["Backend Services (Spring Boot)"]
        UserService["user-service"]
        WorkoutPlanService["workout-plan-service (Master Orchestrator)"]
        TTSService["tts-service (Audio Worker)"]
        MetricsService["metrics-service (Actuator)"]
  end
 subgraph subGraph3["GenAI Services"]
        ExerciseRAGWorker["exercise-rag-worker (Python/FastAPI/LangChain)"]
        LLMApis["LLM APIs (GPT-4o / Local Phi-3)"]
  end
 subgraph subGraph4["Data Stores"]
        PostgresDB["PostgreSQL (User Data, Plans, Feedback)"]
        WeaviateDB["Weaviate (Exercise Vectors)"]
  end
 subgraph Monitoring["Monitoring"]
        Prometheus["Prometheus"]
  end
    ClientWeb -- REST API --> APIGateway
    APIGateway -- REST API --> UserService & WorkoutPlanService & TTSService
    WorkoutPlanService -- Calls --> UserService & ExerciseRAGWorker & LLMApis & TTSService
    ExerciseRAGWorker -- RAG --> WeaviateDB
    UserService -- CRUD --> PostgresDB
    WorkoutPlanService -- CRUD --> PostgresDB
    MetricsService -- Scraped by --> Prometheus
    UserService -- Emits Metrics --> MetricsService
    WorkoutPlanService -- Emits Metrics --> MetricsService
    TTSService -- Emits Metrics --> MetricsService
    ExerciseRAGWorker -- Emits Metrics --> MetricsService
    WorkoutPlanService -.-> LocalLLMService["llm-local (llama.cpp)"]
     ClientWeb:::default
     APIGateway:::gateway
     UserService:::springboot
     WorkoutPlanService:::springboot
     TTSService:::springboot
     MetricsService:::springboot
     ExerciseRAGWorker:::python
     LLMApis:::python
     PostgresDB:::datastore
     WeaviateDB:::datastore
     Prometheus:::monitoring
     LocalLLMService:::python
    classDef default fill:#fff,stroke:#333,stroke-width:2px,rx:5,ry:5
    classDef actor fill:#f9f,stroke:#333,stroke-width:2px,rx:5,ry:5
    classDef usecase fill:#ccf,stroke:#333,stroke-width:2px,rx:5,ry:5
    classDef springboot fill:#lightgreen,stroke:#333,stroke-width:2px,rx:5,ry:5
    classDef python fill:#lightblue,stroke:#333,stroke-width:2px,rx:5,ry:5
    classDef datastore fill:#orange,stroke:#333,stroke-width:2px,rx:5,ry:5
    classDef gateway fill:#eee,stroke:#333,stroke-width:2px,rx:5,ry:5
    classDef monitoring fill:#FFFFE0,stroke:#333,stroke-width:2px,rx:5,ry:5
