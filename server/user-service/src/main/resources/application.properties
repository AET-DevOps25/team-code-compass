# Server Configuration
server.port=8081

# Spring Datasource Configuration
# Using environment variables to match the Docker setup
# When running in Docker, use the service name 'postgres' instead of 'localhost'
spring.datasource.url=jdbc:postgresql://${DB_HOST:localhost}:5432/${POSTGRES_DB:user_service_db}
spring.datasource.username=${POSTGRES_USER:flexfit}
spring.datasource.password=${POSTGRES_PASSWORD:flexfit_local}
spring.datasource.driver-class-name=org.postgresql.Driver

# JPA/Hibernate Configuration
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.format_sql=true

# Spring Security OAuth2 Resource Server Configuration
# The following line is commented out for now.
# On startup, Spring tries to connect to this URI to get security keys.
# Since we don't have a real auth server yet, this would cause a connection error.
# We will re-enable this when we set up Keycloak or another auth provider.
# spring.security.oauth2.resourceserver.jwt.issuer-uri=https://your-auth-server.com/realms/your-realm

# OpenAPI / Swagger UI Configuration
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.api-docs.path=/v3/api-docs
springdoc.api-docs.enabled=true
springdoc.swagger-ui.enabled=true
springdoc.swagger-ui.tryItOutEnabled=true