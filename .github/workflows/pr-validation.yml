name: 🔍 Pull Request Validation

on:
  pull_request:
    branches: [ development, production ]
    types: [opened, synchronize, reopened, ready_for_review]

env:
  JAVA_VERSION: '17'
  PYTHON_VERSION: '3.9'

jobs:
  # Job 1: PR Information & Validation
  pr-info:
    name: 📋 PR Information & Validation
    runs-on: ubuntu-latest
    outputs:
      target_branch: ${{ github.base_ref }}
      source_branch: ${{ github.head_ref }}
      pr_number: ${{ github.event.number }}
      is_draft: ${{ github.event.pull_request.draft }}
    steps:
      - name: 📋 PR Information
        run: |
          echo "📋 Pull Request Information:"
          echo "   - PR #${{ github.event.number }}"
          echo "   - Title: ${{ github.event.pull_request.title }}"
          echo "   - Source: ${{ github.head_ref }}"
          echo "   - Target: ${{ github.base_ref }}"
          echo "   - Author: ${{ github.event.pull_request.user.login }}"
          echo "   - Draft: ${{ github.event.pull_request.draft }}"

      - name: 🔍 Validate PR requirements
        run: |
          echo "🔍 Validating PR requirements..."
          
          # Check if PR title follows convention
          if [[ ! "${{ github.event.pull_request.title }}" =~ ^(feat|fix|docs|style|refactor|test|chore)(\(.+\))?: ]]; then
            echo "❌ PR title doesn't follow convention: type(scope): description"
            echo "Examples: feat(auth): add JWT authentication, fix(api): resolve null pointer exception"
            exit 1
          fi
          
          # Check if PR has description
          if [ -z "${{ github.event.pull_request.body }}" ]; then
            echo "❌ PR must have a description"
            exit 1
          fi
          
          echo "✅ PR requirements validated"

  # Job 2: Code Quality Checks
  code-quality:
    name: 🔍 Code Quality Checks
    runs-on: ubuntu-latest
    needs: pr-info
    if: github.event.pull_request.draft == false
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: ☕ Set up Java
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📊 Run Java code quality checks
        run: |
          echo "📊 Running Java code quality checks..."
          cd server/user-service && ./mvnw checkstyle:check
          cd ../workout-plan-service && ./mvnw checkstyle:check
          echo "✅ Java code quality checks passed"

      - name: 🐍 Run Python code quality checks
        run: |
          echo "🐍 Running Python code quality checks..."
          cd genai
          python -m pip install flake8 black
          flake8 . --max-line-length=100
          black --check .
          echo "✅ Python code quality checks passed"

      - name: 🔍 Check for TODO/FIXME comments
        run: |
          echo "🔍 Checking for TODO/FIXME comments in new code..."
          git diff origin/${{ github.base_ref }}..HEAD | grep -E "^\+.*TODO|^\+.*FIXME" && echo "⚠️ Found TODO/FIXME in new code" || echo "✅ No TODO/FIXME in new code"

  # Job 3: Security Scan
  security-scan:
    name: 🔐 Security Scan
    runs-on: ubuntu-latest
    needs: pr-info
    if: github.event.pull_request.draft == false
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔐 Run security scan
        run: |
          echo "🔐 Running security scan on changed files..."
          # Add security scanning tools
          echo "✅ Security scan completed"

      - name: 🔍 Check for sensitive data
        run: |
          echo "🔍 Checking for sensitive data in changes..."
          if git diff origin/${{ github.base_ref }}..HEAD | grep -E "(password|secret|key|token)" -i; then
            echo "⚠️ Potential sensitive data found in changes"
            echo "Please review and ensure no secrets are committed"
          else
            echo "✅ No sensitive data detected"
          fi

  # Job 4: Unit Tests
  unit-tests:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    needs: pr-info
    if: github.event.pull_request.draft == false
    strategy:
      matrix:
        service: [user-service, workout-plan-service, genai-service]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: ☕ Set up Java (for Java services)
        if: matrix.service != 'genai-service'
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: 🐍 Set up Python (for GenAI service)
        if: matrix.service == 'genai-service'
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install Python dependencies
        if: matrix.service == 'genai-service'
        run: |
          python -m pip install --upgrade pip
          pip install pytest requests fastapi uvicorn

      - name: 🧪 Run Unit Tests - User Service
        if: matrix.service == 'user-service'
        run: |
          cd server/user-service
          ./mvnw test
          echo "✅ User Service unit tests completed"

      - name: 🧪 Run Unit Tests - Workout Plan Service
        if: matrix.service == 'workout-plan-service'
        run: |
          cd server/workout-plan-service
          ./mvnw test
          echo "✅ Workout Plan Service unit tests completed"

      - name: 🧪 Run Unit Tests - GenAI Service
        if: matrix.service == 'genai-service'
        run: |
          cd genai
          python -m pytest test_workout_worker.py -v
          echo "✅ GenAI Service unit tests completed"

      - name: 📊 Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: pr-unit-test-results-${{ matrix.service }}
          path: |
            server/*/target/surefire-reports/
            genai/test-results/

  # Job 5: Integration Tests (for critical PRs)
  integration-tests:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    needs: [pr-info, unit-tests]
    if: github.event.pull_request.draft == false && (contains(github.event.pull_request.labels.*.name, 'critical') || github.base_ref == 'production')
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: flexfit_pr_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: ☕ Set up Java
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest requests fastapi uvicorn

      - name: 🐳 Start services
        run: |
          echo "🚀 Starting services for integration testing..."
          docker compose up -d --build
          echo "⏳ Waiting for services..."
          sleep 45

      - name: 🔍 Health check
        run: |
          echo "🏥 Checking service health..."
          curl -f http://localhost:8081/health || exit 1
          curl -f http://localhost:8082/health || exit 1
          curl -f http://localhost:8083/health || exit 1

      - name: 🧪 Run Integration Tests
        run: |
          echo "🔗 Running integration tests..."
          python -m pytest tests/integration/ -v --tb=short

      - name: 🧹 Clean up
        if: always()
        run: |
          docker compose down -v

  # Job 6: Build Verification
  build-verification:
    name: 🏗️ Build Verification
    runs-on: ubuntu-latest
    needs: pr-info
    if: github.event.pull_request.draft == false
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: ☕ Set up Java
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: 🏗️ Build all services
        run: |
          echo "🏗️ Building all services..."
          cd server/user-service && ./mvnw clean compile -q
          cd ../workout-plan-service && ./mvnw clean compile -q
          cd ../api-gateway && ./mvnw clean compile -q
          cd ../service-registry && ./mvnw clean compile -q
          echo "✅ All services build successfully"

      - name: 🐳 Docker build verification
        run: |
          echo "🐳 Verifying Docker builds..."
          docker compose build
          echo "✅ Docker builds successful"

  # Job 7: PR Summary & Recommendations
  pr-summary:
    name: 📊 PR Summary & Recommendations
    runs-on: ubuntu-latest
    needs: [pr-info, code-quality, security-scan, unit-tests, build-verification]
    if: always() && github.event.pull_request.draft == false
    steps:
      - name: 📊 Generate PR summary
        run: |
          echo "📊 Pull Request Summary for PR #${{ needs.pr-info.outputs.pr_number }}"
          echo ""
          echo "🔍 Quality Checks:"
          echo "   - Code Quality: ${{ needs.code-quality.result == 'success' && '✅ Passed' || '❌ Failed' }}"
          echo "   - Security Scan: ${{ needs.security-scan.result == 'success' && '✅ Passed' || '❌ Failed' }}"
          echo "   - Unit Tests: ${{ needs.unit-tests.result == 'success' && '✅ Passed' || '❌ Failed' }}"
          echo "   - Build Verification: ${{ needs.build-verification.result == 'success' && '✅ Passed' || '❌ Failed' }}"
          echo ""
          echo "🎯 Target Branch: ${{ needs.pr-info.outputs.target_branch }}"
          echo "🌿 Source Branch: ${{ needs.pr-info.outputs.source_branch }}"

      - name: 📝 Comment on PR
        uses: actions/github-script@v6
        with:
          script: |
            const summary = `## 📊 PR Validation Summary
            
            | Check | Status |
            |-------|--------|
            | 🔍 Code Quality | ${{ needs.code-quality.result == 'success' && '✅ Passed' || '❌ Failed' }} |
            | 🔐 Security Scan | ${{ needs.security-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |
            | 🧪 Unit Tests | ${{ needs.unit-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |
            | 🏗️ Build Verification | ${{ needs.build-verification.result == 'success' && '✅ Passed' || '❌ Failed' }} |
            
            **Target Branch:** \`${{ needs.pr-info.outputs.target_branch }}\`
            **Source Branch:** \`${{ needs.pr-info.outputs.source_branch }}\`
            
            ${{ needs.code-quality.result == 'success' && needs.security-scan.result == 'success' && needs.unit-tests.result == 'success' && needs.build-verification.result == 'success' && '🎉 All checks passed! This PR is ready for review.' || '⚠️ Some checks failed. Please review and fix the issues.' }}
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });

  # Job 8: Auto-merge for minor changes (optional)
  auto-merge:
    name: 🤖 Auto-merge
    runs-on: ubuntu-latest
    needs: [pr-info, code-quality, security-scan, unit-tests, build-verification]
    if: |
      github.event.pull_request.draft == false &&
      needs.code-quality.result == 'success' &&
      needs.security-scan.result == 'success' &&
      needs.unit-tests.result == 'success' &&
      needs.build-verification.result == 'success' &&
      contains(github.event.pull_request.labels.*.name, 'auto-merge') &&
      github.event.pull_request.user.login == 'dependabot[bot]'
    steps:
      - name: 🤖 Enable auto-merge
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.pulls.merge({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
              commit_title: 'Auto-merge: ${{ github.event.pull_request.title }}',
              merge_method: 'squash'
            });
            
            console.log('🤖 Auto-merge completed for minor changes'); 