version: '3.8'

services:
  # Database
  postgres:
    image: postgres:13
    container_name: flexfit-postgres-prod
    environment:
      POSTGRES_DB: flexfit_prod
      POSTGRES_USER: flexfit_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./server/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - flexfit-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U flexfit_user -d flexfit_prod"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Service Registry
  service-registry:
    build:
      context: ./server/service-registry
      dockerfile: Dockerfile
    container_name: flexfit-service-registry-prod
    environment:
      SPRING_PROFILES_ACTIVE: docker,prod
      SERVER_PORT: 8761
    ports:
      - "8761:8761"
    networks:
      - flexfit-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8761/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # API Gateway
  api-gateway:
    build:
      context: ./server/api-gateway
      dockerfile: Dockerfile
    container_name: flexfit-api-gateway-prod
    environment:
      SPRING_PROFILES_ACTIVE: docker,prod
      SERVER_PORT: 8080
      EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: http://service-registry:8761/eureka
    ports:
      - "8080:8080"
    networks:
      - flexfit-network
    depends_on:
      service-registry:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # User Service
  user-service:
    build:
      context: ./server/user-service
      dockerfile: Dockerfile
    container_name: flexfit-user-service-prod
    environment:
      SPRING_PROFILES_ACTIVE: docker,prod
      SERVER_PORT: 8081
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/flexfit_prod
      SPRING_DATASOURCE_USERNAME: flexfit_user
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: http://service-registry:8761/eureka
    networks:
      - flexfit-network
    depends_on:
      postgres:
        condition: service_healthy
      service-registry:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8081/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Workout Plan Service
  workout-plan-service:
    build:
      context: ./server/workout-plan-service
      dockerfile: Dockerfile
    container_name: flexfit-workout-plan-service-prod
    environment:
      SPRING_PROFILES_ACTIVE: docker,prod
      SERVER_PORT: 8082
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/flexfit_prod
      SPRING_DATASOURCE_USERNAME: flexfit_user
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      USER_SERVICE_URL: http://user-service:8081
      GENAI_SERVICE_URL: http://genai-workout-worker:8083
      EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: http://service-registry:8761/eureka
    networks:
      - flexfit-network
    depends_on:
      postgres:
        condition: service_healthy
      service-registry:
        condition: service_healthy
      user-service:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8082/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # GenAI Workout Worker
  genai-workout-worker:
    build:
      context: ./genai
      dockerfile: Dockerfile
    container_name: flexfit-genai-workout-worker-prod
    environment:
      PORT: 8083
      ENVIRONMENT: production
      CHAIR_API_KEY: ${CHAIR_API_KEY}
      LOG_LEVEL: INFO
    ports:
      - "8083:8083"
    networks:
      - flexfit-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8083/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: flexfit-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    networks:
      - flexfit-network
    depends_on:
      - api-gateway
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for Caching (Production)
  redis:
    image: redis:7-alpine
    container_name: flexfit-redis-prod
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_prod_data:/data
    networks:
      - flexfit-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "redis-cli --no-auth-warning -a ${REDIS_PASSWORD} ping | grep PONG"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: flexfit-prometheus-prod
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_prod_data:/prometheus
    networks:
      - flexfit-network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: flexfit-grafana-prod
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
    volumes:
      - grafana_prod_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - flexfit-network
    depends_on:
      - prometheus
    restart: unless-stopped

volumes:
  postgres_prod_data:
    driver: local
  redis_prod_data:
    driver: local
  prometheus_prod_data:
    driver: local
  grafana_prod_data:
    driver: local

networks:
  flexfit-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 